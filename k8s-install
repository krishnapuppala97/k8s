sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
( OR )
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list


apt-get update
sudo apt -y install vim git curl wget kubelet kubeadm kubectl
 sudo apt-get install -y kubelet kubeadm kubectl


systemctl daemon-reload

systemctl start kubelet
systemctl enable kubelet.service

##install kubernetes clauster
sudo su -

kubeadm init
exit

 mkdir -p $HOME/.kube
 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
 sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

let check its working or not ?
ubuntu@ip-172-31-28-24:~$ kubectl get pods -o wide -n kube-system
The connection to the server 172.31.28.24:6443 was refused - did you specify the right host or port?

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

#!/bin/bash
sudo su -
apt-get update -y
apt-get install docker.io -y
systemctl start docker
systemctl enable docker.service
swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
apt-get update
apt-get install -y apt-transport-https ca-certificates curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt -y install vim git curl wget kubelet kubeadm
apt-get install -y kubelet kubeadm kubectl
systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service





kubeadm join 172.31.22.226:6443 --token 134zq7.9zf6y9dkog578ak2 --discovery-token-ca-cert-hash sha256:767151ba4edd623fe765041bff10ba548ca12d6814bb370198f66cafe2c5b96e


class 2

apiVersion: v1      # apiVersion: this is the version of the API used by the cluster.
                    # With new versions of Kubernetes being released, new functionality is introduced and, hence, new API versions may be defined.
                    # For the pod object, we use API version v1.

kind: Pod

metadata:           # Metadata: here we can define data about the object we are about to create.
  name: webserver   # In this example, we only provide the name of the pod. But you can provide other details like the namespace.
spec:               #The spec part defines the characteristics that a given Kubernetes object should have.
                    # It is the clusterâ€™s responsibility to update the status of the object to always match the desired configuration.
                    # In our example, the spec instructs that this object (the pod) should have one container with some attributes.
  containers:
  - name: webserver  # The name that this container will have.
    image: nginx:latest # The image on which it is based.
    ports:               # The port(s) that will be open.
    - containerPort: 80

git clone https://github.com/collabnix/kubelabs
cd kubelabs/pods101


kubeadm token create --print-join-command
